{"version":3,"sources":["Tweet.js","TweetTool.js"],"names":["Tweet","props","Content","text","small","Side","align","Item","onClick","handleDelete","bind","index","className","TweetTool","console","log","window","localStorage","getItem","tweets","JSON","parse","state","current","valid","currentLength","replyToId","this","concat","setState","setItem","stringify","e","preventDefault","target","elements","focus","createTweet","filter","tweet","i","currentTarget","value","result","twitter","parseTweet","weightedLength","id","keyCode","shiftKey","map","key","warningClass","Field","Control","name","onChange","handleIdChange","ref","el","myFormRef","onSubmit","handleSubmit","onKeyDown","onEnterPress","autoFocus","handleChange","tweetsArray","onCopy","copied","Component"],"mappings":"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","file":"static/js/11.57aa99fc.chunk.js","sourcesContent":["import React from 'react';\nimport { Content, Icon, Box, Media, Level } from 'react-bulma-components';\n\nconst Tweet = props => (\n  <Box>\n    <Media>\n      <Media.Content>\n        <Content>\n          <p>{props.text}</p>\n        </Content>\n        <Level small=\"true\">\n          <Level.Side align=\"left\">\n            <Level.Item onClick={props.handleDelete.bind(this, props.index)}>\n              <Icon small>\n                <i className=\"fa fa-trash\" />\n              </Icon>\n            </Level.Item>\n          </Level.Side>\n        </Level>\n      </Media.Content>\n    </Media>\n  </Box>\n);\n\nexport default Tweet;\n","import React, { Component } from 'react';\nimport { Tag, Form, Section, Button, Level } from 'react-bulma-components';\n\nimport Textarea from 'react-bulma-components/lib/components/form/components/textarea';\nimport Input from 'react-bulma-components/lib/components/form/components/input';\nimport './App.css';\nimport Tweet from './Tweet';\nimport twitter from 'twitter-text';\nimport { CopyToClipboard } from 'react-copy-to-clipboard';\n\nclass TweetTool extends Component {\n  constructor(props) {\n    super(props);\n    console.log(window.localStorage.getItem('tweet-storm:tweets'));\n    const tweets = JSON.parse(\n      window.localStorage.getItem('tweet-storm:tweets') || '[]'\n    );\n\n    this.state = {\n      tweets: tweets || [],\n      current: '',\n      valid: true,\n      currentLength: 0,\n      replyToId: '',\n    };\n  }\n\n  createTweet() {\n    const tweets = this.state.tweets.concat(this.state.current);\n\n    console.log(tweets);\n\n    this.setState({\n      tweets: tweets,\n      current: '',\n      currentLength: 0,\n      valid: true,\n    });\n\n    window.localStorage.setItem('tweet-storm:tweets', JSON.stringify(tweets));\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    e.target.elements[0].focus();\n    this.createTweet();\n  }\n\n  handleDelete(index) {\n    const tweets = this.state.tweets.filter((tweet, i) => {\n      return i !== index;\n    });\n\n    this.setState({\n      tweets: tweets,\n    });\n\n    window.localStorage.setItem(\n      'tweet-storm:tweets',\n      JSON.stringify(tweets, null, 2)\n    );\n  }\n\n  handleChange(e) {\n    const text = e.currentTarget.value;\n    const result = twitter.parseTweet(text);\n    console.log('result =>', result);\n    this.setState({\n      current: text,\n      currentLength: result.weightedLength,\n      valid: result.valid,\n    });\n  }\n\n  handleIdChange(e) {\n    const id = e.currentTarget.value;\n    this.setState({\n      replyToId: id,\n    });\n  }\n\n  tweetsArray() {\n    let outputText = `<script>\n  var tweets = ${JSON.stringify(this.state.tweets)};\n  var replyToId = \"${this.state.replyToId}\";\n</script>`;\n\n    return outputText;\n  }\n\n  onEnterPress(e) {\n    if (e.keyCode === 13 && e.shiftKey === false) {\n      e.preventDefault();\n      this.createTweet();\n    }\n  }\n\n  render() {\n    const tweets = this.state.tweets.map((tweet, i) => {\n      return (\n        <Tweet\n          text={tweet}\n          index={i}\n          key={i}\n          handleDelete={this.handleDelete.bind(this)}\n        />\n      );\n    });\n\n    const warningClass = this.state.valid ? 'is-info' : 'is-danger';\n\n    return (\n      <div>\n        <Section>\n          <h1 className=\"title\">Tweet Maker</h1>\n          <h2>\n            Add a tweet's ID here if you want tweets to be posted as replies\n          </h2>\n          <Form.Field>\n            <Form.Control>\n              <Input\n                name=\"replyToId\"\n                onChange={this.handleIdChange.bind(this)}\n                value={this.state.replyToId}\n              />\n            </Form.Control>\n          </Form.Field>\n          <h2>\n            Write a tweet and <strong>press enter</strong>.\n          </h2>\n          <form\n            ref={el => (this.myFormRef = el)}\n            className=\"form\"\n            onSubmit={this.handleSubmit.bind(this)}\n          >\n            <Form.Field>\n              <Form.Control>\n                <Textarea\n                  onKeyDown={this.onEnterPress.bind(this)}\n                  autoFocus\n                  className={warningClass}\n                  onChange={this.handleChange.bind(this)}\n                  value={this.state.current}\n                ></Textarea>\n              </Form.Control>\n            </Form.Field>\n            <Form.Field>\n              <Tag className={`is-large ${warningClass}`}>\n                {this.state.currentLength}\n              </Tag>{' '}\n              chars\n            </Form.Field>\n          </form>\n          <div className=\"tweets\">{tweets}</div>\n        </Section>\n\n        <section className=\"section raw\">\n          <h2>When you're done, click below to copy your tweets...</h2>\n          <Form.Field>\n            <Form.Control>\n              <CopyToClipboard\n                text={this.tweetsArray()}\n                onCopy={() => this.setState({ copied: true })}\n              >\n                <Form.Field>\n                  <Level>\n                    <Level.Side align=\"left\">\n                      <Level.Item>\n                        <Button>Copy to clipboard</Button>\n                      </Level.Item>\n                      <Level.Item>\n                        {this.state.copied ? (\n                          <Tag className=\"is-success\">Copied.</Tag>\n                        ) : (\n                          ''\n                        )}\n                      </Level.Item>\n                    </Level.Side>\n                  </Level>\n                </Form.Field>\n              </CopyToClipboard>\n            </Form.Control>\n          </Form.Field>\n        </section>\n      </div>\n    );\n  }\n}\n\nexport default TweetTool;\n"],"sourceRoot":""}